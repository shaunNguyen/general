				automake

===================================================================================================

refer : https://www.gnu.org/software/libtool/manual/libtool.pdf
# Makefile.in generated by automake 1.16.1 from Makefile.am.
				
libtoolize :
------------ prepare a package to use libtool
add libtool support to your package
provides a standard way to add libtool support to your package.
libtoolize [options] 
in SWSS :	libtoolize --force --copy &&
--force : replace existing files 
--copy : copy file rahter than symlinking them 
the following specifications were used in developing and evaluating this system:
1. the system must be elegant as possible
2. the system must be fully intergrated with the GNU Autoconf and Automake utilities, so that it will be
easy for GNU maintainers to use. 
3. Portability to other (non-GNU) architactures and tools is desireable. 

Using libtool 
--------------
different platforms we have different standard libraries :
'a23' : an Ultrix 4.2 platform with only static libraries 	position-dependent code 
'burger': A netBSD/i386 1.2 platform with shared libraries	position-independent code

1.Creating object files :
PIC : position-independent code 
 
burger$ gcc -g -O -c main.c
burger$
burger$ gcc -g -O -c foo.c
burger$ gcc -g -O -c hello.c
burger$
a23$ libtool --mode=compile gcc -g -O -c foo.c
gcc -g -O -c foo.c -o foo.o
a23$ libtool --mode=compile gcc -g -O -c hello.c
gcc -g -O -c hello.c -o hello.o
a23$
*.lo file is the libtool object, which Libtool uses to determine what object file may be built a shared library
on shared libraries systems :
burger$ libtool --mode=compile gcc -g -O -c foo.c
mkdir .libs
gcc -g -O -c foo.c -fPIC -DPIC -o .libs/foo.o
gcc -g -O -c foo.c -o foo.o >/dev/null 2>&1
burger$
NOTE : libtool automatically create .libs directory upon its first execution, where PIC library object files 
will be stored 	
foo.lo 		a libtool object file -> generated by ltmain.sh 
.libs/foo.o	pic_object
foo.o		non-pic_object

2. linking libraries 
without libtool, the programmer would invoke the ar command to create a static library :
	burger$ ar cr libhello.a hello.o foo.o	
	burger$
or RANLIB 
	burger$ ranlib libhello.a
	burger$
on platform without shared libraries, libtool sumply acts as a wrapper for the system ar cmd 
Libtool control file name (*.la differ *.a)  
	a23$ libtool --mode=link gcc -g -O -o libhello.la foo.o hello.o
*** warning linking the shared library libhello.la against the non-libtool onjects foo.o hello.o is not portable

3. linking executables : 
old way of linking against an uninstalled library :
	gcc -g -O -o hello.old main.o libhello.a -lm 

libtool :
	a23$ libtool --mode=link gcc -g -O -o hell main.o libhello.la
	gcc -g -O -o hell main.o ./.libs/libhello.a -lm
	a23$
libtool transform libhello.la to ./.libs/libhello.a, a23 without shared libraries 
on burger : 
	burger$ libtool --mode=link gcc -g -O -o hell main.o libhello.la
	gcc -g -O -o .libs/hell main.o -L./.libs -R/usr/local/lib -lhello -lm
	creating hell
	burger$
Now assume libhello.la had already been installed, and you want to link a new program. you could figure out where 

4. debugging executables 
burger$ libtool --mode=execute gdb hell

5. Installing libraries 
on a non-libtool system is quite straightforward .. just copy them into place 
	burger$ su
	Password: ********
	burger# cp libhello.a /usr/local/lib/libhello.a
	burger#
Oops, donâ€™t forget the ranlib command:
	burger# ranlib /usr/local/lib/libhello.a
	burger#
Libtool installation , just use the install or cp command 
	a23# libtool --mode=install cp libhello.la /usr/local/lib/libhello.la
	cp libhello.la /usr/local/lib/libhello.la
	cp .libs/libhello.a /usr/local/lib/libhello.a		
	ranlib /usr/local/lib/libhello.a
	a23#
shared libraries example: 
	burger# libtool --mode=install install -c libhello.la \
	/usr/local/lib/libhello.la
install -c .libs/libhello.so.0.0 /usr/local/lib/libhello.so.0.0
install -c libhello.la /usr/local/lib/libhello.la
install -c .libs/libhello.a /usr/local/lib/libhello.a
ranlib /usr/local/lib/libhello.a
burger#
then, running 'libtool -n finish libdir' can give you further hints on what to do 
	burger# libtool -n finish /usr/local/lib
	"""
	// some things you need to do 
	"""

6. Installing executables 
So, for our Ultrix example, we would run:
	a23# libtool --mode=install install -c hell /usr/local/bin/hell
	install -c hell /usr/local/bin/hell
	a23#
On shared library systems that require wrapper scripts, libtool just ignores the wrapper
script and installs the correct binary:
	burger# libtool --mode=install install -c hell /usr/local/bin/hell
	install -c .libs/hell /usr/local/bin/hell
	burger#

7. linking static libraries 
	burger$ libtool --mode=install ./install-sh -c libhello.a \
	/local/lib/libhello.a
	./install-sh -c libhello.a /local/lib/libhello.a
	ranlib /local/lib/libhello.a
	burger$

Invoking libtool:
=================

Intergrating libtool with your package :
========================================
Libtool marco files as wellas ltmain.sh are copied into your package using libtoolize and aclocal 
after setting up the configure.ac and toplevel Makefile.am
then, autoconf adds the needed tests to the configure script
-> these step are often automated with autoreconf 
m4 : has been shosen as location for additional autoconf macros 
build-aux : location for auxiliary build tool 
During configuration, the libtool script is generated either through config.status or config.lt

1. Autoconf macros exported by libtool 
2. Writing Makefile rules for libtool 
Libtool is fully intergrated with Automake, if you want to use libtool in a regular Makefil( or Makefile.in)
Do one of the following :
	1. downloading the latest Automake -> install and using 
	2. learn how to write Makefile rules by hand. 
Makefile.in was automatically generated from the Makefile.am by Automake 
3. Using automake with libtool 
First, to link a program against a libtool library -> 'program_LDADD'
4. Configuring libtool :
. LT_INIT macro 
should call LT_INIT to your configure.ac file 
. Platform-specific configuration notes 
While libtool tries to hide as mayny platform
.......
5.Including libtool in your package 
need to include the following files with your package :
config.guess 	attemp to guess a cannoical system name 
config.sub	cannoical system name validation subroutine script
install-sh	BSD-compatible install replacement script 
ltmain.sh 	a generic script implementing basic libtool functionality 
-> should use libtoolize program rather than manually copying these files into your package
Invoking libtoolize :
	libtoolize [options].....
